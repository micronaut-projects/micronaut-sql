plugins {
    id 'io.micronaut.build.internal.sql-module'
}

sourceSets {
    txTest {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

configurations {
    txTestImplementation.extendsFrom implementation
    txTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    api projects.micronautJdbc
    api(mn.micronaut.aop)
    api(mn.micronaut.inject)
    api(libs.jdbi3.core) {
        exclude group:'com.github.ben-manes.caffeine', module:'caffeine'
    }
    compileOnly(libs.managed.h2)
    compileOnly(mnData.micronaut.data.tx)
    compileOnly(mnSpring.spring.jdbc)
    runtimeOnly(mnCache.micronaut.cache.caffeine)

    testRuntimeOnly projects.micronautJdbcHikari
    testRuntimeOnly(libs.managed.h2)
    testRuntimeOnly(mnSpring.spring.jdbc)

    testAnnotationProcessor(mn.micronaut.inject.java)
    testAnnotationProcessor(mnSpring.micronaut.spring.annotation)
    testImplementation(mnSpring.micronaut.spring)
    testImplementation(mn.micronaut.http.server.netty)
    testImplementation(mn.micronaut.http.client)
    testImplementation(mn.micronaut.management)

    testImplementation(mnMicrometer.micronaut.micrometer.core)

    testImplementation(mnCache.micronaut.cache.core)
    testImplementation(libs.jdbi3.sqlobject)

    txTestRuntimeOnly projects.micronautJdbcTomcat
    txTestRuntimeOnly(libs.managed.h2)
    txTestAnnotationProcessor(mn.micronaut.inject.java)
    txTestAnnotationProcessor(mnData.micronaut.data.processor)
    txTestImplementation(mnData.micronaut.data.tx)
    txTestImplementation(mn.micronaut.inject.groovy)
    txTestRuntimeOnly(mnLogging.logback.classic)
    txTestImplementation(libs.jdbi3.sqlobject)
    txTestImplementation(mnTest.micronaut.test.spock)
}


task txTest(type: Test) {
    testClassesDirs = sourceSets.txTest.output.classesDirs
    classpath = sourceSets.txTest.runtimeClasspath
    shouldRunAfter test
}
check.dependsOn txTest

project.afterEvaluate {
    checkstyleTxTest.enabled = false
}
